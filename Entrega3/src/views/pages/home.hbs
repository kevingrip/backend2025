<div class="userBody">
  <div class="startTitle">
    <h1>Lista de Perfumes</h1>
  </div>

  <div style="display: flex;justify-content: flex-end; margin: 5vh">
    <button onclick="vaciarCarrito()">Vaciar Carrito</button>
  </div>

  <div class="container">
    {{#each parfums}}
    <div class="box" id="product-{{this._id}}">
      <h2>{{this.title}}</h2>
      <p>{{this.category}}</p>
      <p>{{this.description}}</p>
      <p>Stock: {{this.stock}}</p>
      <p>${{this.price}}</p>
      <p>{{this._id}}</p>
      <button type="button" style="width: 10rem; height: 2rem; margin:1rem" onclick="addToCart('{{this._id}}')">Agregar
        al carrito</button>

    </div>
    {{/each}}
  </div>

  <div class="pagination-container">
    {{#if pagination.hasPrevPage}}
    <a href="/home/?page={{pagination.prevPage}}&limit={{pagination.limit}}&sort={{pagination.sort}}">Anterior</a>
    {{/if}}

    {{#if pagination.hasAnyPage}}
    <span>Página {{pagination.page}} de {{pagination.totalPages}}</span>
    {{/if}}

    {{#if pagination.hasNextPage}}
    <a href="/home/?page={{pagination.nextPage}}&limit={{pagination.limit}}&sort={{pagination.sort}}">Siguiente</a>
    {{/if}}
  </div>

</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  socket.on('nuevoProductoCargado', (product) => {
    const container = document.getElementById('productContainer');
    if (!container) return;

    const div = document.createElement('div');
    div.className = 'box';
    div.id = `product-${product._id}`;
    div.innerHTML = `
      <h2>${product.title}</h2>
      <p>${product.category}</p>
      <p>${product.description}</p>
      <p>Stock: ${product.stock}</p>
      <p>$${product.price}</p>
      <p>${product._id}</p>
    `;
    container.appendChild(div);
  });

  socket.on('productoEliminado', (productId) => {
    const productDiv = document.getElementById(`product-${productId}`);
    if (productDiv) productDiv.remove();
  });

  socket.on('productoActualizado', (product) => {
    const productDiv = document.getElementById(`product-${product._id}`);
    if (productDiv) {
      productDiv.innerHTML = `
          <h2>${product.title}</h2>
          <p>${product.category}</p>
          <p>${product.description}</p>
          <p>Stock: ${product.stock}</p>
          <p>$${product.price}</p>
          <p>${product._id}</p>
          
        `;
    }
  });

  socket.on('connect', () => {
    const cartId = localStorage.getItem('cartId');
    socket.emit('solicitarCarrito', cartId);
  });

  socket.on("carritoAsignado", (data) => {
    localStorage.setItem("cartId", data.cartId);
  });



  const addToCart = async (product) => {
    const cartId = localStorage.getItem("cartId");
    const res = await fetch(`/api/carts/${cartId}/product/${product}`, {
      method: "POST"
    });

    if (res.ok) {
      console.log("Producto agregado al carrito");
      Swal.fire({
        icon: 'success',
        title: '¡Listo!',
        text: 'Producto agregado al carrito',
        timer: 1500,
        showConfirmButton: false
      });
    } else {
      console.error("Error al enviar el formulario");
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudo agregar el producto',
      });
    }
  }

  const vaciarCarrito = async () => {
    const cartId = localStorage.getItem("cartId");
    const res = await fetch(`/api/carts/${cartId}`, {
      method: "DELETE"
    });
    if (res.ok){
      console.log("Carrito vaciado correctamente")
      Swal.fire({
        icon: 'success',
        title: '¡Listo!',
        text: 'Carrito vaciado correctamente',
        timer: 1500,
        showConfirmButton: false
      });
    }else {
      console.error("Error al enviar el formulario");
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudo vaciar el carrito',
      });
    }
    
  }



</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>